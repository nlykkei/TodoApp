name: Deploy

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      resourceGroupName:
        required: true
        type: string
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true

jobs:
  validate-infra:
    name: Validate infrastructure
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Run preflight validation
        uses: azure/arm-deploy@v2
        with:
          deploymentName: ${{ github.run_number }}
          scope: resourcegroup
          resourceGroupName: ${{ inputs.resourceGroupName }}
          template: ./infra/main.bicep
          parameters: >
            environment=${{ inputs.environment }}
          deploymentMode: Validate
        if: inputs.environment != 'production'
      - name: Run what-if
        uses: azure/arm-deploy@v2
        with:
          scope: resourcegroup
          resourceGroupName: ${{ inputs.resourceGroupName }}
          template: ./infra/main.bicep
          parameters: >
            environment=${{ inputs.environment }}
          additionalArguments: --what-if
          deploymentMode: Complete
          failOnStdErr: false
        if: inputs.environment == 'production'

  deploy-infra:
    name: Deploy infrastructure
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      appServiceAppName: ${{ steps.deploy.outputs.appServiceAppName }}
      appServiceAppHostName: ${{ steps.deploy.outputs.appServiceAppHostName }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Deploy infrastructure
        uses: azure/arm-deploy@v2
        id: deploy
        with:
          deploymentName: ${{ github.run_number }}
          scope: resourcegroup
          resourceGroupName: ${{ inputs.resourceGroupName }}
          template: ./infra/main.bicep
          parameters: >
            environment=${{ inputs.environment }}
          deploymentMode: Complete
          failOnStdErr: false
      - name: Website URL
        run: 'echo "Website URL (${{ inputs.environment }}) ðŸš€: https://${{ steps.deploy.outputs.appServiceAppHostName }}" >> "${GITHUB_STEP_SUMMARY}"'
    needs: [validate-infra]

  deploy-app:
    name: Deploy application
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: application
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Deploy application
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ needs.deploy-infra.outputs.appServiceAppName }}
          package: publish.zip
    needs: [deploy-infra]

  # smoke-test:
  #   name: Run smoke tests
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Smoke tests
  #       run: |
  #         $container = New-PesterContainer `
  #           -Path 'infra/Website.Tests.ps1' `
  #           -Data @{ HostName = '${{needs.deploy.outputs.appServiceAppHostName}}' }
  #         Invoke-Pester `
  #           -Container $container `
  #           -CI
  #       shell: pwsh
  #   needs: [deploy-app]
